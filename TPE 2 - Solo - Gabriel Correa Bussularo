#include <stdio.h>   
#include <stdlib.h>  
#include <time.h>    

#define TAM 1000  // Tamanho do vetor

// Preenche o vetor com valores aleatórios
void gerar_numeros(int vet[]) {
    for (int i = 0; i < TAM; i++) {
        vet[i] = rand() % 10000;  // Números entre 0 e 9999
    }
}

// Copia os dados de um vetor para outro
void copiar_vetor(int dest[], int orig[]) {
    for (int i = 0; i < TAM; i++) {
        dest[i] = orig[i];
    }
}

// Função que imprime os 10 primeiros e os 10 últimos elementos de um vetor
void mostrar_vetor(char nome[], int vet[]) {
    printf("%s\n", nome);  
    
    printf("Início: ");
    for (int i = 0; i < 10; i++) {
        printf("%d ", vet[i]);
    }
    
    printf("\nFinal:  ");
    for (int i = TAM - 10; i < TAM; i++) {
        printf("%d ", vet[i]);
    }
    printf("\n\n");
}

// Ordenação por trocas (Bubble Sort)
void ordenar_bolha(int vet[], int ordem) {
    int temp;
    for (int passo = 0; passo < TAM - 1; passo++) {
        for (int i = 0; i < TAM - 1 - passo; i++) {
            // Verifica a ordem desejada
            if ((ordem && vet[i] > vet[i+1]) || (!ordem && vet[i] < vet[i+1])) {
                // Faz a troca
                temp = vet[i];
                vet[i] = vet[i+1];
                vet[i+1] = temp;
            }
        }
    }
}

// Ordenação por inserção
void ordenar_insercao(int vet[], int ordem) {
    int atual, j;
    for (int i = 1; i < TAM; i++) {
        atual = vet[i];
        j = i - 1;
        
        // Encontra a posição correta
        while (j >= 0 && ((ordem && vet[j] > atual) || (!ordem && vet[j] < atual))) {
            vet[j + 1] = vet[j];
            j--;
        }
        vet[j + 1] = atual;
    }
}

int main() {
    int original[TAM];  // Vetor original
    int bolha_cres[TAM], bolha_decres[TAM];  // Para bubble sort
    int insercao_cres[TAM], insercao_decres[TAM];  // Para insertion sort
    
    // Inicializa o gerador de números aleatórios
    srand(time(0));
    
    // Gera os números
    gerar_numeros(original);
    
    // Faz cópias para cada ordenação
    copiar_vetor(bolha_cres, original);
    copiar_vetor(bolha_decres, original);
    copiar_vetor(insercao_cres, original);
    copiar_vetor(insercao_decres, original);
    
    // Executa as ordenações
    ordenar_bolha(bolha_cres, 1);    // Crescente
    ordenar_bolha(bolha_decres, 0);  // Decrescente
    
    ordenar_insercao(insercao_cres, 1);    // Crescente
    ordenar_insercao(insercao_decres, 0);  // Decrescente
    
    // Mostra os resultados
    mostrar_vetor("Vetor original:", original);
    mostrar_vetor("Bubble Sort (crescente):", bolha_cres);
    mostrar_vetor("Bubble Sort (decrescente):", bolha_decres);
    mostrar_vetor("Insertion Sort (crescente):", insercao_cres);
    mostrar_vetor("Insertion Sort (decrescente):", insercao_decres);

    return 0;
}
